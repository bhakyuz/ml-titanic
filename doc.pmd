```python{trick relative paths for import, echo = False}
# https://mg.readthedocs.io/importing-local-python-modules-from-jupyter-notebooks/sys-path-in-notebook/path-notebook.html
import os
import sys
sys.path.insert(0, os.path.abspath('../ml'))

```

## Read data first
```python{read data}
import pandas as pd
# Training data should be placed in data-raw/train.csv
training = pd.read_csv("data-raw/train.csv")
```

## Take a look

```python{first rows}
print(training.head())
```
```python{info on data}
training.info()
```

## Find missing values

```python{see missing data}
training.isnull().sum()

```


## Handle missing values
```python{find the values to replace for missing variable}
from ml import get_missing_replacements
# This will be written into data/replacements.json for further use
replacements=get_missing_replacements(training)
```
### Check all the variables are missing proof.
Even though, training data do no have missing values, it is safer to generate back-up values for each column.
```python{any replacesment for missing values is missing }
# Missing values are not handled for following variables:
for i in training.keys().tolist():
	print(i + ': ' + str(training[i].isnull().sum()) + ' missing value/s') if replacements.get(i) is None else None
```

## Results of preporcessing 
```python{after preprocess}
from ml.preprocess import * 
training_preprocessed=prepare_data(training, replacements)
# see first rows
print(training_preprocessed.head())
# any missing values
training_preprocessed.isnull().sum()

```

## Results of preporcessing 
```python{exploration of variables}
# Here variables will be plotted in order to see details
# likely with traget variable

```

